import fs from 'fs-extra';
import path from "node:path";
import logger from '../../utils/logger.mjs';
import client from '../../client.mjs';
import { config } from '../../../config.mjs';

// ┘Е┘Д┘Б ╪н┘Б╪╕ ╪и┘К╪з┘Ж╪з╪к ╪з┘Д┘Е╪о╪з┘Д┘Б╪з╪к
const DATA_FILE = path.join(config.paths.data, '/violations.json');
const DATA_DIR = path.dirname(DATA_FILE);
const WARNING_LIMIT = 1; // ╪╣╪п╪п ╪з┘Д╪к┘Ж╪и┘К┘З╪з╪к ┘В╪и┘Д ╪з┘Д╪╖╪▒╪п

// ╪з┘Д╪к╪г┘Г╪п ┘Е┘Ж ┘И╪м┘И╪п ╪з┘Д┘Е╪м┘Д╪п ┘И╪з┘Д┘Е┘Д┘Б
function ensureDataFile() {
    try {
        if (!fs.existsSync(DATA_DIR)) {
            fs.mkdirSync(DATA_DIR, { recursive: true });
        }
        if (!fs.existsSync(DATA_FILE)) {
            fs.writeJsonSync(DATA_FILE, {});
        }
    } catch (error) {
        logger.error('Error ensuring data file:', error);
    }
}

// ╪к╪н┘Е┘К┘Д ┘И╪н┘Б╪╕ ╪и┘К╪з┘Ж╪з╪к ╪з┘Д┘Е╪о╪з┘Д┘Б╪з╪к
function loadViolations() {
    ensureDataFile();
    try {
        return fs.readJsonSync(DATA_FILE, { throws: false }) || {};
    } catch (error) {
        logger.error('Error loading violations data:', error);
        return {};
    }
}

function saveViolations(data) {
    ensureDataFile();
    try {
        fs.writeJsonSync(DATA_FILE, data, { spaces: 2 });
    } catch (error) {
        logger.error('Error saving violations data:', error);
    }
}

export async function autoKick(message, messageMeta, chat) {
    try {
        if (!messageMeta.isGroup) return;

        const linkPattern = /(https?:\/\/[^\s]+)/g;
        if (!linkPattern.test(message.body)) return;

        const senderId = message.author || message.from;
        const senderName = messageMeta.pushname || messageMeta.number;
        const botId = client.info.wid._serialized;

        // ╪з┘Д╪к╪н┘В┘В ┘Е┘Е╪з ╪е╪░╪з ┘Г╪з┘Ж ╪з┘Д╪и┘И╪к ┘Е╪┤╪▒┘Б┘Л╪з
        const botParticipant = chat.participants.find(p => p.id._serialized === botId);
        if (!botParticipant || !botParticipant.isAdmin) return;

        // ╪з┘Д╪к╪н┘В┘В ┘Е┘Е╪з ╪е╪░╪з ┘Г╪з┘Ж ╪з┘Д┘Е╪▒╪│┘Д ┘Е╪┤╪▒┘Б┘Л╪з
        const senderParticipant = chat.participants.find(p => p.id._serialized === senderId);
        if (senderParticipant && senderParticipant.isAdmin) return;

        // ╪н╪░┘Б ╪з┘Д╪▒╪│╪з┘Д╪й
        await message.delete(true).catch(() => { });

        // ╪к╪н┘Е┘К┘Д ╪з┘Д┘Е╪о╪з┘Д┘Б╪з╪к
        let violations = loadViolations();
        const chatId = chat.id._serialized;

        if (!violations[chatId]) violations[chatId] = {};
        if (!violations[chatId][senderId]) violations[chatId][senderId] = { count: 0 };

        // ╪▓┘К╪з╪п╪й ╪╣╪п╪п ╪з┘Д┘Е╪о╪з┘Д┘Б╪з╪к
        violations[chatId][senderId].count++;

        if (violations[chatId][senderId].count > WARNING_LIMIT) {
            await chat.sendMessage(`ЁЯЪл *╪╣╪░╪▒┘Л╪з ${senderName}╪М ┘Д┘В╪п ╪к╪м╪з┘И╪▓╪к ╪з┘Д╪н╪п ╪з┘Д┘Е╪│┘Е┘И╪н ╪и┘З ┘Е┘Ж ╪з┘Д╪к┘Ж╪и┘К┘З╪з╪к ╪и╪┤╪г┘Ж ┘Ж╪┤╪▒ ╪з┘Д╪▒┘И╪з╪и╪╖╪М ┘И╪и┘Ж╪з╪б┘Л ╪╣┘Д┘Й ╪░┘Д┘Г╪М ┘Ж┘Ж┘З┘К ╪╣╪╢┘И┘К╪к┘Г ┘Б┘К ┘З╪░┘З ╪з┘Д┘Е╪м┘Е┘И╪╣╪й.*`);
            await chat.removeParticipants([senderId]).catch(() => { });

            // ╪е╪╣╪з╪п╪й ╪к╪╣┘К┘К┘Ж ╪╣╪п╪п ╪з┘Д┘Е╪о╪з┘Д┘Б╪з╪к ╪и╪╣╪п ╪з┘Д╪╖╪▒╪п
            delete violations[chatId][senderId];
        } else {
            await chat.sendMessage(`тЪая╕П *${senderName}*\n╪к╪м┘Ж┘С╪и ╪е╪▒╪│╪з┘Д ╪з┘Д╪▒┘И╪з╪и╪╖. (╪к┘Ж╪и┘К┘З ${violations[chatId][senderId].count} ┘Е┘Ж ${WARNING_LIMIT + 1})`);

        }

        // ╪н┘Б╪╕ ╪з┘Д╪к╪╣╪п┘К┘Д╪з╪к
        saveViolations(violations);

    } catch (error) {
        logger.error('Error in autoKick:', error);
    }
}