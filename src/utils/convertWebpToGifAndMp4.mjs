import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs-extra';
import path from 'path';
import os from 'os';

const execAsync = promisify(exec);

/**
 * ุชุญููู ููู WebP ุฅูู GIF ุซู ุฅูู MP4.
 * 
 * ูููู ูุฐุง ุงูุฏุงูุฉ ุจุชุญููู ููู WebP ุฅูู ุตูุบุฉ GIF ุจุงุณุชุฎุฏุงู ุจุฑูุงูุฌ `magick` ุฃู `convert` ุจูุงุกู ุนูู ุงููุธุงูุ
 * ููู ุซู ุชุญููู GIF ุฅูู ุตูุบุฉ MP4 ุจุงุณุชุฎุฏุงู `FFmpeg`ุ ูุฃุฎูุฑูุง ุญุฐู ุงููููุงุช ุงููุคูุชุฉ.
 * 
 * @param {string} inputPath - ูุณุงุฑ ููู WebP ุงููุฏุฎู.
 * @param {string} gifOutputPath - ูุณุงุฑ ููู GIF ุงููุงุชุฌ.
 * @param {string} mp4OutputPath - ูุณุงุฑ ููู MP4 ุงููุงุชุฌ.
 * 
 * @returns {Promise<Object>} - ูุนูุฏ ูุงุฆู ูุญุชูู ุนูู ูุณุงุฑ ููู MP4 ุงููุงุชุฌ ูุฑุณุงูุฉ ุชูุตูููุฉ.
 *   - `outputPath` {string}: ูุณุงุฑ ููู MP4 ุงููุงุชุฌ.
 *   - `message` {string}: ุฑุณุงูุฉ ุชูุตูููุฉ ุชูุถุญ ุงูููุช ุงููุณุชุบุฑู ูู ุงูุชุญููู.
 * 
 * @throws {Error} - ูุฑูู ุฎุทุฃ ุฅุฐุง ูุดูุช ุฃู ุฎุทูุฉ ูู ุนูููุฉ ุงูุชุญููู ุฃู ุฅุฐุง ูุงู ุงูููู ุงููุฏุฎู ุบูุฑ ููุฌูุฏ.
 * 
 * @example
 * const result = await convertWebpToGifAndMp4('input.webp', 'output.gif', 'output.mp4');
 * console.log(result.outputPath); // ูุณุงุฑ ููู MP4 ุงููุงุชุฌ
 * console.log(result.message); // ุฑุณุงูุฉ ุชูุตูููุฉ ุนู ุงูููุช ุงููุณุชุบุฑู
 */
export default async function convertWebpToGifAndMp4(inputPath, gifOutputPath, mp4OutputPath) {
    try {
        const startTime = Date.now(); // ููุช ุงูุจุฏุก ูุชุญููู ุงูุฃุฏุงุก
        // ุชุญูู ูู ูุฌูุฏ ุงูููู ุงููุฏุฎู
        const fileExists = await fs.pathExists(inputPath);
        if (!fileExists) {
            throw new Error(`ุงูููู ุงููุฏุฎู "${inputPath}" ุบูุฑ ููุฌูุฏ.`);
        }

        // ุงุฎุชูุงุฑ ุงูุฃูุฑ ุงูููุงุณุจ ุจูุงุกู ุนูู ุงููุธุงู
        const isWindows = os.platform() === 'win32';
        const convertCommand = isWindows ? 'magick' : 'convert';

        // ุชุญููู WebP ุฅูู GIF
        const gifCommand = `${convertCommand} "${inputPath}" "${gifOutputPath}"`;
        const { stderr: gifError } = await execAsync(gifCommand);

        if (gifError) {
            throw new Error(`ุฎุทุฃ ุฃุซูุงุก ุชุญููู WebP ุฅูู GIF: ${gifError}`);
        }

        // ุชุญููู GIF ุฅูู MP4 ุจุงุณุชุฎุฏุงู FFmpeg
        const mp4Command = `ffmpeg -i "${gifOutputPath}" -c:v libx264 -pix_fmt yuv420p -crf 20 -preset veryfast -y "${mp4OutputPath}"`;
        const { stderr: mp4Error } = await execAsync(mp4Command);

        // ุญุฐู ููู GIF ุจุนุฏ ุงูุชุญููู ุฅูู MP4
        await fs.remove(gifOutputPath);
        // ุญุฐู ุงูููู ุงููุฏุฎู ุจุนุฏ ุงูุชุญููู
        await fs.remove(inputPath);

        // ุญุณุงุจ ุงูููุช ุงููุณุชุบุฑู ูู ุงูุนูููุฉ
        const endTime = Date.now();
        return {
            outputPath: mp4OutputPath,
            message: `ุชู ุงูุชุญููู ุจูุฌุงุญ ูู ${((endTime - startTime) / 1000).toFixed(2)} ุซุงููุฉ โฑ๏ธ๐`
        };

    } catch (error) {
        console.error('ุญุฏุซ ุฎุทุฃ:', error.message);
        throw error; // ุฅุนุงุฏุฉ ุชูุฑูุฑ ุงูุฎุทุฃ ูููุณุชุฏุนู
    }
}